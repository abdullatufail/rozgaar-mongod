"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["main-app-node_modules_next_dist_compiled_react-d"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/client.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/client.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar m = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\nif (false) {} else {\n    var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    exports.createRoot = function(c, o) {\n        i.usingClientEntryPoint = true;\n        try {\n            return m.createRoot(c, o);\n        } finally{\n            i.usingClientEntryPoint = false;\n        }\n    };\n    exports.hydrateRoot = function(c, h, o) {\n        i.usingClientEntryPoint = true;\n        try {\n            return m.hydrateRoot(c, h, o);\n        } finally{\n            i.usingClientEntryPoint = false;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QtZG9tL2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLElBQUlDLG1CQUFPQSxDQUFDO0FBQ2hCLElBQUlDLEtBQXlCLEVBQWMsRUFHMUMsTUFBTTtJQUNMLElBQUlJLElBQUlOLEVBQUVPLGtEQUFrRDtJQUM1REosa0JBQWtCLEdBQUcsU0FBVUssQ0FBQyxFQUFFQyxDQUFDO1FBQ2pDSCxFQUFFSSxxQkFBcUIsR0FBRztRQUMxQixJQUFJO1lBQ0YsT0FBT1YsRUFBRUksVUFBVSxDQUFDSSxHQUFHQztRQUN6QixTQUFVO1lBQ1JILEVBQUVJLHFCQUFxQixHQUFHO1FBQzVCO0lBQ0Y7SUFDQVAsbUJBQW1CLEdBQUcsU0FBVUssQ0FBQyxFQUFFRyxDQUFDLEVBQUVGLENBQUM7UUFDckNILEVBQUVJLHFCQUFxQixHQUFHO1FBQzFCLElBQUk7WUFDRixPQUFPVixFQUFFSyxXQUFXLENBQUNHLEdBQUdHLEdBQUdGO1FBQzdCLFNBQVU7WUFDUkgsRUFBRUkscUJBQXFCLEdBQUc7UUFDNUI7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QtZG9tL2NsaWVudC5qcz8wY2FjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uIChjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uIChjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iXSwibmFtZXMiOlsibSIsInJlcXVpcmUiLCJwcm9jZXNzIiwiZXhwb3J0cyIsImNyZWF0ZVJvb3QiLCJoeWRyYXRlUm9vdCIsImkiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImMiLCJvIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/index.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nfunction checkDCE() {\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === \"undefined\" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== \"function\") {\n        return;\n    }\n    if (true) {\n        // This branch is unreachable because this function is only called\n        // in production, but the condition is true only in development.\n        // Therefore if the branch is still here, dead code elimination wasn't\n        // properly applied.\n        // Don't change the message. React DevTools relies on it. Also make sure\n        // this message doesn't occur elsewhere in this function, or it will cause\n        // a false positive.\n        throw new Error(\"^_^\");\n    }\n    try {\n        // Verify that the code above has been dead code eliminated (DCE'd).\n        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n    } catch (err) {\n        // DevTools shouldn't crash React, no matter what.\n        // We should still report in case we break this code.\n        console.error(err);\n    }\n}\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QtZG9tL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0E7SUFDUCx5Q0FBeUMsR0FDekMsSUFDRSxPQUFPQyxtQ0FBbUMsZUFDMUMsT0FBT0EsK0JBQStCRCxRQUFRLEtBQUssWUFDbkQ7UUFDQTtJQUNGO0lBQ0EsSUFBSUUsSUFBeUIsRUFBYztRQUN6QyxrRUFBa0U7UUFDbEUsZ0VBQWdFO1FBQ2hFLHNFQUFzRTtRQUN0RSxvQkFBb0I7UUFDcEIsd0VBQXdFO1FBQ3hFLDBFQUEwRTtRQUMxRSxvQkFBb0I7UUFDcEIsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsSUFBSTtRQUNGLG9FQUFvRTtRQUNwRUYsK0JBQStCRCxRQUFRLENBQUNBO0lBQzFDLEVBQUUsT0FBT0ksS0FBSztRQUNaLGtEQUFrRDtRQUNsRCxxREFBcUQ7UUFDckRDLFFBQVFDLEtBQUssQ0FBQ0Y7SUFDaEI7QUFDRjtBQUVBLElBQUlGLEtBQXlCLEVBQWMsRUFLMUMsTUFBTTtJQUNMSywwS0FBeUI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1kb20vaW5kZXguanM/MDdiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJwcm9jZXNzIiwiRXJyb3IiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react-refresh/cjs/react-refresh-runtime.development.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-refresh/cjs/react-refresh-runtime.development.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * @license React\n * react-refresh-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        // ATTENTION\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map; // We never remove these associations.\n        // It's OK to reference families, but use WeakMap/Set for types.\n        var allFamiliesByID = new Map();\n        var allFamiliesByType = new PossiblyWeakMap();\n        var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families\n        // that have actually been edited here. This keeps checks fast.\n        // $FlowIssue\n        var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.\n        // It is an array of [Family, NextType] tuples.\n        var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.\n        var helpersByRendererID = new Map();\n        var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.\n        var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.\n        var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.\n        // It needs to be weak because we do this even for roots that failed to mount.\n        // If there is no WeakMap, we won't attempt to do retrying.\n        // $FlowIssue\n        var rootElements = typeof WeakMap === \"function\" ? new WeakMap() : null;\n        var isPerformingRefresh = false;\n        function computeFullKey(signature) {\n            if (signature.fullKey !== null) {\n                return signature.fullKey;\n            }\n            var fullKey = signature.ownKey;\n            var hooks;\n            try {\n                hooks = signature.getCustomHooks();\n            } catch (err) {\n                // This can happen in an edge case, e.g. if expression like Foo.useSomething\n                // depends on Foo which is lazily initialized during rendering.\n                // In that case just assume we'll have to remount.\n                signature.forceReset = true;\n                signature.fullKey = fullKey;\n                return fullKey;\n            }\n            for(var i = 0; i < hooks.length; i++){\n                var hook = hooks[i];\n                if (typeof hook !== \"function\") {\n                    // Something's wrong. Assume we need to remount.\n                    signature.forceReset = true;\n                    signature.fullKey = fullKey;\n                    return fullKey;\n                }\n                var nestedHookSignature = allSignaturesByType.get(hook);\n                if (nestedHookSignature === undefined) {\n                    continue;\n                }\n                var nestedHookKey = computeFullKey(nestedHookSignature);\n                if (nestedHookSignature.forceReset) {\n                    signature.forceReset = true;\n                }\n                fullKey += \"\\n---\\n\" + nestedHookKey;\n            }\n            signature.fullKey = fullKey;\n            return fullKey;\n        }\n        function haveEqualSignatures(prevType, nextType) {\n            var prevSignature = allSignaturesByType.get(prevType);\n            var nextSignature = allSignaturesByType.get(nextType);\n            if (prevSignature === undefined && nextSignature === undefined) {\n                return true;\n            }\n            if (prevSignature === undefined || nextSignature === undefined) {\n                return false;\n            }\n            if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {\n                return false;\n            }\n            if (nextSignature.forceReset) {\n                return false;\n            }\n            return true;\n        }\n        function isReactClass(type) {\n            return type.prototype && type.prototype.isReactComponent;\n        }\n        function canPreserveStateBetween(prevType, nextType) {\n            if (isReactClass(prevType) || isReactClass(nextType)) {\n                return false;\n            }\n            if (haveEqualSignatures(prevType, nextType)) {\n                return true;\n            }\n            return false;\n        }\n        function resolveFamily(type) {\n            // Only check updated types to keep lookups fast.\n            return updatedFamiliesByType.get(type);\n        } // If we didn't care about IE11, we could use new Map/Set(iterable).\n        function cloneMap(map) {\n            var clone = new Map();\n            map.forEach(function(value, key) {\n                clone.set(key, value);\n            });\n            return clone;\n        }\n        function cloneSet(set) {\n            var clone = new Set();\n            set.forEach(function(value) {\n                clone.add(value);\n            });\n            return clone;\n        } // This is a safety mechanism to protect against rogue getters and Proxies.\n        function getProperty(object, property) {\n            try {\n                return object[property];\n            } catch (err) {\n                // Intentionally ignore.\n                return undefined;\n            }\n        }\n        function performReactRefresh() {\n            if (pendingUpdates.length === 0) {\n                return null;\n            }\n            if (isPerformingRefresh) {\n                return null;\n            }\n            isPerformingRefresh = true;\n            try {\n                var staleFamilies = new Set();\n                var updatedFamilies = new Set();\n                var updates = pendingUpdates;\n                pendingUpdates = [];\n                updates.forEach(function(_ref) {\n                    var family = _ref[0], nextType = _ref[1];\n                    // Now that we got a real edit, we can create associations\n                    // that will be read by the React reconciler.\n                    var prevType = family.current;\n                    updatedFamiliesByType.set(prevType, family);\n                    updatedFamiliesByType.set(nextType, family);\n                    family.current = nextType; // Determine whether this should be a re-render or a re-mount.\n                    if (canPreserveStateBetween(prevType, nextType)) {\n                        updatedFamilies.add(family);\n                    } else {\n                        staleFamilies.add(family);\n                    }\n                }); // TODO: rename these fields to something more meaningful.\n                var update = {\n                    updatedFamilies: updatedFamilies,\n                    // Families that will re-render preserving state\n                    staleFamilies: staleFamilies // Families that will be remounted\n                };\n                helpersByRendererID.forEach(function(helpers) {\n                    // Even if there are no roots, set the handler on first update.\n                    // This ensures that if *new* roots are mounted, they'll use the resolve handler.\n                    helpers.setRefreshHandler(resolveFamily);\n                });\n                var didError = false;\n                var firstError = null; // We snapshot maps and sets that are mutated during commits.\n                // If we don't do this, there is a risk they will be mutated while\n                // we iterate over them. For example, trying to recover a failed root\n                // may cause another root to be added to the failed list -- an infinite loop.\n                var failedRootsSnapshot = cloneSet(failedRoots);\n                var mountedRootsSnapshot = cloneSet(mountedRoots);\n                var helpersByRootSnapshot = cloneMap(helpersByRoot);\n                failedRootsSnapshot.forEach(function(root) {\n                    var helpers = helpersByRootSnapshot.get(root);\n                    if (helpers === undefined) {\n                        throw new Error(\"Could not find helpers for a root. This is a bug in React Refresh.\");\n                    }\n                    if (!failedRoots.has(root)) {}\n                    if (rootElements === null) {\n                        return;\n                    }\n                    if (!rootElements.has(root)) {\n                        return;\n                    }\n                    var element = rootElements.get(root);\n                    try {\n                        helpers.scheduleRoot(root, element);\n                    } catch (err) {\n                        if (!didError) {\n                            didError = true;\n                            firstError = err;\n                        } // Keep trying other roots.\n                    }\n                });\n                mountedRootsSnapshot.forEach(function(root) {\n                    var helpers = helpersByRootSnapshot.get(root);\n                    if (helpers === undefined) {\n                        throw new Error(\"Could not find helpers for a root. This is a bug in React Refresh.\");\n                    }\n                    if (!mountedRoots.has(root)) {}\n                    try {\n                        helpers.scheduleRefresh(root, update);\n                    } catch (err) {\n                        if (!didError) {\n                            didError = true;\n                            firstError = err;\n                        } // Keep trying other roots.\n                    }\n                });\n                if (didError) {\n                    throw firstError;\n                }\n                return update;\n            } finally{\n                isPerformingRefresh = false;\n            }\n        }\n        function register(type, id) {\n            {\n                if (type === null) {\n                    return;\n                }\n                if (typeof type !== \"function\" && typeof type !== \"object\") {\n                    return;\n                } // This can happen in an edge case, e.g. if we register\n                // return value of a HOC but it returns a cached component.\n                // Ignore anything but the first registration for each type.\n                if (allFamiliesByType.has(type)) {\n                    return;\n                } // Create family or remember to update it.\n                // None of this bookkeeping affects reconciliation\n                // until the first performReactRefresh() call above.\n                var family = allFamiliesByID.get(id);\n                if (family === undefined) {\n                    family = {\n                        current: type\n                    };\n                    allFamiliesByID.set(id, family);\n                } else {\n                    pendingUpdates.push([\n                        family,\n                        type\n                    ]);\n                }\n                allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.\n                if (typeof type === \"object\" && type !== null) {\n                    switch(getProperty(type, \"$$typeof\")){\n                        case REACT_FORWARD_REF_TYPE:\n                            register(type.render, id + \"$render\");\n                            break;\n                        case REACT_MEMO_TYPE:\n                            register(type.type, id + \"$type\");\n                            break;\n                    }\n                }\n            }\n        }\n        function setSignature(type, key) {\n            var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;\n            {\n                if (!allSignaturesByType.has(type)) {\n                    allSignaturesByType.set(type, {\n                        forceReset: forceReset,\n                        ownKey: key,\n                        fullKey: null,\n                        getCustomHooks: getCustomHooks || function() {\n                            return [];\n                        }\n                    });\n                } // Visit inner types because we might not have signed them.\n                if (typeof type === \"object\" && type !== null) {\n                    switch(getProperty(type, \"$$typeof\")){\n                        case REACT_FORWARD_REF_TYPE:\n                            setSignature(type.render, key, forceReset, getCustomHooks);\n                            break;\n                        case REACT_MEMO_TYPE:\n                            setSignature(type.type, key, forceReset, getCustomHooks);\n                            break;\n                    }\n                }\n            }\n        } // This is lazily called during first render for a type.\n        // It captures Hook list at that time so inline requires don't break comparisons.\n        function collectCustomHooksForSignature(type) {\n            {\n                var signature = allSignaturesByType.get(type);\n                if (signature !== undefined) {\n                    computeFullKey(signature);\n                }\n            }\n        }\n        function getFamilyByID(id) {\n            {\n                return allFamiliesByID.get(id);\n            }\n        }\n        function getFamilyByType(type) {\n            {\n                return allFamiliesByType.get(type);\n            }\n        }\n        function findAffectedHostInstances(families) {\n            {\n                var affectedInstances = new Set();\n                mountedRoots.forEach(function(root) {\n                    var helpers = helpersByRoot.get(root);\n                    if (helpers === undefined) {\n                        throw new Error(\"Could not find helpers for a root. This is a bug in React Refresh.\");\n                    }\n                    var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);\n                    instancesForRoot.forEach(function(inst) {\n                        affectedInstances.add(inst);\n                    });\n                });\n                return affectedInstances;\n            }\n        }\n        function injectIntoGlobalHook(globalObject) {\n            {\n                // For React Native, the global hook will be set up by require('react-devtools-core').\n                // That code will run before us. So we need to monkeypatch functions on existing hook.\n                // For React Web, the global hook will be set up by the extension.\n                // This will also run before us.\n                var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n                if (hook === undefined) {\n                    // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.\n                    // Note that in this case it's important that renderer code runs *after* this method call.\n                    // Otherwise, the renderer will think that there is no global hook, and won't do the injection.\n                    var nextID = 0;\n                    globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {\n                        renderers: new Map(),\n                        supportsFiber: true,\n                        inject: function(injected) {\n                            return nextID++;\n                        },\n                        onScheduleFiberRoot: function(id, root, children) {},\n                        onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {},\n                        onCommitFiberUnmount: function() {}\n                    };\n                }\n                if (hook.isDisabled) {\n                    // This isn't a real property on the hook, but it can be set to opt out\n                    // of DevTools integration and associated warnings and logs.\n                    // Using console['warn'] to evade Babel and ESLint\n                    console[\"warn\"](\"Something has shimmed the React DevTools global hook (__REACT_DEVTOOLS_GLOBAL_HOOK__). \" + \"Fast Refresh is not compatible with this shim and will be disabled.\");\n                    return;\n                } // Here, we just want to get a reference to scheduleRefresh.\n                var oldInject = hook.inject;\n                hook.inject = function(injected) {\n                    var id = oldInject.apply(this, arguments);\n                    if (typeof injected.scheduleRefresh === \"function\" && typeof injected.setRefreshHandler === \"function\") {\n                        // This version supports React Refresh.\n                        helpersByRendererID.set(id, injected);\n                    }\n                    return id;\n                }; // Do the same for any already injected roots.\n                // This is useful if ReactDOM has already been initialized.\n                // https://github.com/facebook/react/issues/17626\n                hook.renderers.forEach(function(injected, id) {\n                    if (typeof injected.scheduleRefresh === \"function\" && typeof injected.setRefreshHandler === \"function\") {\n                        // This version supports React Refresh.\n                        helpersByRendererID.set(id, injected);\n                    }\n                }); // We also want to track currently mounted roots.\n                var oldOnCommitFiberRoot = hook.onCommitFiberRoot;\n                var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {};\n                hook.onScheduleFiberRoot = function(id, root, children) {\n                    if (!isPerformingRefresh) {\n                        // If it was intentionally scheduled, don't attempt to restore.\n                        // This includes intentionally scheduled unmounts.\n                        failedRoots.delete(root);\n                        if (rootElements !== null) {\n                            rootElements.set(root, children);\n                        }\n                    }\n                    return oldOnScheduleFiberRoot.apply(this, arguments);\n                };\n                hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {\n                    var helpers = helpersByRendererID.get(id);\n                    if (helpers !== undefined) {\n                        helpersByRoot.set(root, helpers);\n                        var current = root.current;\n                        var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.\n                        // This logic is copy-pasted from similar logic in the DevTools backend.\n                        // If this breaks with some refactoring, you'll want to update DevTools too.\n                        if (alternate !== null) {\n                            var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null && mountedRoots.has(root);\n                            var isMounted = current.memoizedState != null && current.memoizedState.element != null;\n                            if (!wasMounted && isMounted) {\n                                // Mount a new root.\n                                mountedRoots.add(root);\n                                failedRoots.delete(root);\n                            } else if (wasMounted && isMounted) ;\n                            else if (wasMounted && !isMounted) {\n                                // Unmount an existing root.\n                                mountedRoots.delete(root);\n                                if (didError) {\n                                    // We'll remount it on future edits.\n                                    failedRoots.add(root);\n                                } else {\n                                    helpersByRoot.delete(root);\n                                }\n                            } else if (!wasMounted && !isMounted) {\n                                if (didError) {\n                                    // We'll remount it on future edits.\n                                    failedRoots.add(root);\n                                }\n                            }\n                        } else {\n                            // Mount a new root.\n                            mountedRoots.add(root);\n                        }\n                    } // Always call the decorated DevTools hook.\n                    return oldOnCommitFiberRoot.apply(this, arguments);\n                };\n            }\n        }\n        function hasUnrecoverableErrors() {\n            // TODO: delete this after removing dependency in RN.\n            return false;\n        } // Exposed for testing.\n        function _getMountedRootCount() {\n            {\n                return mountedRoots.size;\n            }\n        } // This is a wrapper over more primitive functions for setting signature.\n        // Signatures let us decide whether the Hook order has changed on refresh.\n        //\n        // This function is intended to be used as a transform target, e.g.:\n        // var _s = createSignatureFunctionForTransform()\n        //\n        // function Hello() {\n        //   const [foo, setFoo] = useState(0);\n        //   const value = useCustomHook();\n        //   _s(); /* Call without arguments triggers collecting the custom Hook list.\n        //          * This doesn't happen during the module evaluation because we\n        //          * don't want to change the module order with inline requires.\n        //          * Next calls are noops. */\n        //   return <h1>Hi</h1>;\n        // }\n        //\n        // /* Call with arguments attaches the signature to the type: */\n        // _s(\n        //   Hello,\n        //   'useState{[foo, setFoo]}(0)',\n        //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */\n        // );\n        function createSignatureFunctionForTransform() {\n            {\n                var savedType;\n                var hasCustomHooks;\n                var didCollectHooks = false;\n                return function(type, key, forceReset, getCustomHooks) {\n                    if (typeof key === \"string\") {\n                        // We're in the initial phase that associates signatures\n                        // with the functions. Note this may be called multiple times\n                        // in HOC chains like _s(hoc1(_s(hoc2(_s(actualFunction))))).\n                        if (!savedType) {\n                            // We're in the innermost call, so this is the actual type.\n                            savedType = type;\n                            hasCustomHooks = typeof getCustomHooks === \"function\";\n                        } // Set the signature for all types (even wrappers!) in case\n                        // they have no signatures of their own. This is to prevent\n                        // problems like https://github.com/facebook/react/issues/20417.\n                        if (type != null && (typeof type === \"function\" || typeof type === \"object\")) {\n                            setSignature(type, key, forceReset, getCustomHooks);\n                        }\n                        return type;\n                    } else {\n                        // We're in the _s() call without arguments, which means\n                        // this is the time to collect custom Hook signatures.\n                        // Only do this once. This path is hot and runs *inside* every render!\n                        if (!didCollectHooks && hasCustomHooks) {\n                            didCollectHooks = true;\n                            collectCustomHooksForSignature(savedType);\n                        }\n                    }\n                };\n            }\n        }\n        function isLikelyComponentType(type) {\n            {\n                switch(typeof type){\n                    case \"function\":\n                        {\n                            // First, deal with classes.\n                            if (type.prototype != null) {\n                                if (type.prototype.isReactComponent) {\n                                    // React class.\n                                    return true;\n                                }\n                                var ownNames = Object.getOwnPropertyNames(type.prototype);\n                                if (ownNames.length > 1 || ownNames[0] !== \"constructor\") {\n                                    // This looks like a class.\n                                    return false;\n                                } // eslint-disable-next-line no-proto\n                                if (type.prototype.__proto__ !== Object.prototype) {\n                                    // It has a superclass.\n                                    return false;\n                                } // Pass through.\n                            // This looks like a regular function with empty prototype.\n                            } // For plain functions and arrows, use name as a heuristic.\n                            var name = type.name || type.displayName;\n                            return typeof name === \"string\" && /^[A-Z]/.test(name);\n                        }\n                    case \"object\":\n                        {\n                            if (type != null) {\n                                switch(getProperty(type, \"$$typeof\")){\n                                    case REACT_FORWARD_REF_TYPE:\n                                    case REACT_MEMO_TYPE:\n                                        // Definitely React components.\n                                        return true;\n                                    default:\n                                        return false;\n                                }\n                            }\n                            return false;\n                        }\n                    default:\n                        {\n                            return false;\n                        }\n                }\n            }\n        }\n        exports._getMountedRootCount = _getMountedRootCount;\n        exports.collectCustomHooksForSignature = collectCustomHooksForSignature;\n        exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;\n        exports.findAffectedHostInstances = findAffectedHostInstances;\n        exports.getFamilyByID = getFamilyByID;\n        exports.getFamilyByType = getFamilyByType;\n        exports.hasUnrecoverableErrors = hasUnrecoverableErrors;\n        exports.injectIntoGlobalHook = injectIntoGlobalHook;\n        exports.isLikelyComponentType = isLikelyComponentType;\n        exports.performReactRefresh = performReactRefresh;\n        exports.register = register;\n        exports.setSignature = setSignature;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-refresh/cjs/react-refresh-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react-refresh/runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-refresh/runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-refresh-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-refresh/cjs/react-refresh-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QtcmVmcmVzaC9ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLHNNQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LXJlZnJlc2gvcnVudGltZS5qcz85YzZlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1yZWZyZXNoLXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtcmVmcmVzaC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-refresh/runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js ***!
  \*****************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * @license React\n * react-server-dom-webpack-client.browser.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var ReactDOM = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n        var React = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // -----------------------------------------------------------------------------\n        var enableBinaryFlight = false;\n        function createStringDecoder() {\n            return new TextDecoder();\n        }\n        var decoderOptions = {\n            stream: true\n        };\n        function readPartialStringChunk(decoder, buffer) {\n            return decoder.decode(buffer, decoderOptions);\n        }\n        function readFinalStringChunk(decoder, buffer) {\n            return decoder.decode(buffer);\n        }\n        // This is the parsed shape of the wire format which is why it is\n        // condensed to only the essentialy information\n        var ID = 0;\n        var CHUNKS = 1;\n        var NAME = 2; // export const ASYNC = 3;\n        // This logic is correct because currently only include the 4th tuple member\n        // when the module is async. If that changes we will need to actually assert\n        // the value is true. We don't index into the 4th slot because flow does not\n        // like the potential out of bounds access\n        function isAsyncImport(metadata) {\n            return metadata.length === 4;\n        }\n        function resolveClientReference(bundlerConfig, metadata) {\n            if (bundlerConfig) {\n                var moduleExports = bundlerConfig[metadata[ID]];\n                var resolvedModuleData = moduleExports[metadata[NAME]];\n                var name;\n                if (resolvedModuleData) {\n                    // The potentially aliased name.\n                    name = resolvedModuleData.name;\n                } else {\n                    // If we don't have this specific name, we might have the full module.\n                    resolvedModuleData = moduleExports[\"*\"];\n                    if (!resolvedModuleData) {\n                        throw new Error('Could not find the module \"' + metadata[ID] + '\" in the React SSR Manifest. ' + \"This is probably a bug in the React Server Components bundler.\");\n                    }\n                    name = metadata[NAME];\n                }\n                if (isAsyncImport(metadata)) {\n                    return [\n                        resolvedModuleData.id,\n                        resolvedModuleData.chunks,\n                        name,\n                        1\n                    ];\n                } else {\n                    return [\n                        resolvedModuleData.id,\n                        resolvedModuleData.chunks,\n                        name\n                    ];\n                }\n            }\n            return metadata;\n        }\n        // If they're still pending they're a thenable. This map also exists\n        // in Webpack but unfortunately it's not exposed so we have to\n        // replicate it in user space. null means that it has already loaded.\n        var chunkCache = new Map();\n        function requireAsyncModule(id) {\n            // We've already loaded all the chunks. We can require the module.\n            var promise = __webpack_require__(id);\n            if (typeof promise.then !== \"function\") {\n                // This wasn't a promise after all.\n                return null;\n            } else if (promise.status === \"fulfilled\") {\n                // This module was already resolved earlier.\n                return null;\n            } else {\n                // Instrument the Promise to stash the result.\n                promise.then(function(value) {\n                    var fulfilledThenable = promise;\n                    fulfilledThenable.status = \"fulfilled\";\n                    fulfilledThenable.value = value;\n                }, function(reason) {\n                    var rejectedThenable = promise;\n                    rejectedThenable.status = \"rejected\";\n                    rejectedThenable.reason = reason;\n                });\n                return promise;\n            }\n        }\n        function ignoreReject() {} // Start preloading the modules since we might need them soon.\n        // This function doesn't suspend.\n        function preloadModule(metadata) {\n            var chunks = metadata[CHUNKS];\n            var promises = [];\n            var i = 0;\n            while(i < chunks.length){\n                var chunkId = chunks[i++];\n                var chunkFilename = chunks[i++];\n                var entry = chunkCache.get(chunkId);\n                if (entry === undefined) {\n                    var thenable = loadChunk(chunkId, chunkFilename);\n                    promises.push(thenable); // $FlowFixMe[method-unbinding]\n                    var resolve = chunkCache.set.bind(chunkCache, chunkId, null);\n                    thenable.then(resolve, ignoreReject);\n                    chunkCache.set(chunkId, thenable);\n                } else if (entry !== null) {\n                    promises.push(entry);\n                }\n            }\n            if (isAsyncImport(metadata)) {\n                if (promises.length === 0) {\n                    return requireAsyncModule(metadata[ID]);\n                } else {\n                    return Promise.all(promises).then(function() {\n                        return requireAsyncModule(metadata[ID]);\n                    });\n                }\n            } else if (promises.length > 0) {\n                return Promise.all(promises);\n            } else {\n                return null;\n            }\n        } // Actually require the module or suspend if it's not yet ready.\n        // Increase priority if necessary.\n        function requireModule(metadata) {\n            var moduleExports = __webpack_require__(metadata[ID]);\n            if (isAsyncImport(metadata)) {\n                if (typeof moduleExports.then !== \"function\") ;\n                else if (moduleExports.status === \"fulfilled\") {\n                    // This Promise should've been instrumented by preloadModule.\n                    moduleExports = moduleExports.value;\n                } else {\n                    throw moduleExports.reason;\n                }\n            }\n            if (metadata[NAME] === \"*\") {\n                // This is a placeholder value that represents that the caller imported this\n                // as a CommonJS module as is.\n                return moduleExports;\n            }\n            if (metadata[NAME] === \"\") {\n                // This is a placeholder value that represents that the caller accessed the\n                // default property of this if it was an ESM interop module.\n                return moduleExports.__esModule ? moduleExports.default : moduleExports;\n            }\n            return moduleExports[metadata[NAME]];\n        }\n        var chunkMap = new Map();\n        /**\n * We patch the chunk filename function in webpack to insert our own resolution\n * of chunks that come from Flight and may not be known to the webpack runtime\n */ var webpackGetChunkFilename = __webpack_require__.u;\n        __webpack_require__.u = function(chunkId) {\n            var flightChunk = chunkMap.get(chunkId);\n            if (flightChunk !== undefined) {\n                return flightChunk;\n            }\n            return webpackGetChunkFilename(chunkId);\n        };\n        function loadChunk(chunkId, filename) {\n            chunkMap.set(chunkId, filename);\n            return __webpack_require__.e(chunkId);\n        }\n        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        // This client file is in the shared folder because it applies to both SSR and browser contexts.\n        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;\n        function dispatchHint(code, model) {\n            var dispatcher = ReactDOMCurrentDispatcher.current;\n            if (dispatcher) {\n                switch(code){\n                    case \"D\":\n                        {\n                            var refined = refineModel(code, model);\n                            var href = refined;\n                            dispatcher.prefetchDNS(href);\n                            return;\n                        }\n                    case \"C\":\n                        {\n                            var _refined = refineModel(code, model);\n                            if (typeof _refined === \"string\") {\n                                var _href = _refined;\n                                dispatcher.preconnect(_href);\n                            } else {\n                                var _href2 = _refined[0];\n                                var crossOrigin = _refined[1];\n                                dispatcher.preconnect(_href2, crossOrigin);\n                            }\n                            return;\n                        }\n                    case \"L\":\n                        {\n                            var _refined2 = refineModel(code, model);\n                            var _href3 = _refined2[0];\n                            var as = _refined2[1];\n                            if (_refined2.length === 3) {\n                                var options = _refined2[2];\n                                dispatcher.preload(_href3, as, options);\n                            } else {\n                                dispatcher.preload(_href3, as);\n                            }\n                            return;\n                        }\n                    case \"m\":\n                        {\n                            var _refined3 = refineModel(code, model);\n                            if (typeof _refined3 === \"string\") {\n                                var _href4 = _refined3;\n                                dispatcher.preloadModule(_href4);\n                            } else {\n                                var _href5 = _refined3[0];\n                                var _options = _refined3[1];\n                                dispatcher.preloadModule(_href5, _options);\n                            }\n                            return;\n                        }\n                    case \"S\":\n                        {\n                            var _refined4 = refineModel(code, model);\n                            if (typeof _refined4 === \"string\") {\n                                var _href6 = _refined4;\n                                dispatcher.preinitStyle(_href6);\n                            } else {\n                                var _href7 = _refined4[0];\n                                var precedence = _refined4[1] === 0 ? undefined : _refined4[1];\n                                var _options2 = _refined4.length === 3 ? _refined4[2] : undefined;\n                                dispatcher.preinitStyle(_href7, precedence, _options2);\n                            }\n                            return;\n                        }\n                    case \"X\":\n                        {\n                            var _refined5 = refineModel(code, model);\n                            if (typeof _refined5 === \"string\") {\n                                var _href8 = _refined5;\n                                dispatcher.preinitScript(_href8);\n                            } else {\n                                var _href9 = _refined5[0];\n                                var _options3 = _refined5[1];\n                                dispatcher.preinitScript(_href9, _options3);\n                            }\n                            return;\n                        }\n                    case \"M\":\n                        {\n                            var _refined6 = refineModel(code, model);\n                            if (typeof _refined6 === \"string\") {\n                                var _href10 = _refined6;\n                                dispatcher.preinitModuleScript(_href10);\n                            } else {\n                                var _href11 = _refined6[0];\n                                var _options4 = _refined6[1];\n                                dispatcher.preinitModuleScript(_href11, _options4);\n                            }\n                            return;\n                        }\n                }\n            }\n        } // Flow is having trouble refining the HintModels so we help it a bit.\n        // This should be compiled out in the production build.\n        function refineModel(code, model) {\n            return model;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\"react.default_value\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        var getPrototypeOf = Object.getPrototypeOf;\n        // in case they error.\n        var jsxPropsParents = new WeakMap();\n        var jsxChildrenParents = new WeakMap();\n        function isObjectPrototype(object) {\n            if (!object) {\n                return false;\n            }\n            var ObjectPrototype = Object.prototype;\n            if (object === ObjectPrototype) {\n                return true;\n            } // It might be an object from a different Realm which is\n            // still just a plain simple object.\n            if (getPrototypeOf(object)) {\n                return false;\n            }\n            var names = Object.getOwnPropertyNames(object);\n            for(var i = 0; i < names.length; i++){\n                if (!(names[i] in ObjectPrototype)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function isSimpleObject(object) {\n            if (!isObjectPrototype(getPrototypeOf(object))) {\n                return false;\n            }\n            var names = Object.getOwnPropertyNames(object);\n            for(var i = 0; i < names.length; i++){\n                var descriptor = Object.getOwnPropertyDescriptor(object, names[i]);\n                if (!descriptor) {\n                    return false;\n                }\n                if (!descriptor.enumerable) {\n                    if ((names[i] === \"key\" || names[i] === \"ref\") && typeof descriptor.get === \"function\") {\n                        continue;\n                    }\n                    return false;\n                }\n            }\n            return true;\n        }\n        function objectName(object) {\n            // $FlowFixMe[method-unbinding]\n            var name = Object.prototype.toString.call(object);\n            return name.replace(/^\\[object (.*)\\]$/, function(m, p0) {\n                return p0;\n            });\n        }\n        function describeKeyForErrorMessage(key) {\n            var encodedKey = JSON.stringify(key);\n            return '\"' + key + '\"' === encodedKey ? key : encodedKey;\n        }\n        function describeValueForErrorMessage(value) {\n            switch(typeof value){\n                case \"string\":\n                    {\n                        return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + \"...\");\n                    }\n                case \"object\":\n                    {\n                        if (isArray(value)) {\n                            return \"[...]\";\n                        }\n                        var name = objectName(value);\n                        if (name === \"Object\") {\n                            return \"{...}\";\n                        }\n                        return name;\n                    }\n                case \"function\":\n                    return \"function\";\n                default:\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    return String(value);\n            }\n        }\n        function describeElementType(type) {\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeElementType(type.render);\n                    case REACT_MEMO_TYPE:\n                        return describeElementType(type.type);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeElementType(init(payload));\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        function describeObjectForErrorMessage(objectOrArray, expandedName) {\n            var objKind = objectName(objectOrArray);\n            if (objKind !== \"Object\" && objKind !== \"Array\") {\n                return objKind;\n            }\n            var str = \"\";\n            var start = -1;\n            var length = 0;\n            if (isArray(objectOrArray)) {\n                if (jsxChildrenParents.has(objectOrArray)) {\n                    // Print JSX Children\n                    var type = jsxChildrenParents.get(objectOrArray);\n                    str = \"<\" + describeElementType(type) + \">\";\n                    var array = objectOrArray;\n                    for(var i = 0; i < array.length; i++){\n                        var value = array[i];\n                        var substr = void 0;\n                        if (typeof value === \"string\") {\n                            substr = value;\n                        } else if (typeof value === \"object\" && value !== null) {\n                            substr = \"{\" + describeObjectForErrorMessage(value) + \"}\";\n                        } else {\n                            substr = \"{\" + describeValueForErrorMessage(value) + \"}\";\n                        }\n                        if (\"\" + i === expandedName) {\n                            start = str.length;\n                            length = substr.length;\n                            str += substr;\n                        } else if (substr.length < 15 && str.length + substr.length < 40) {\n                            str += substr;\n                        } else {\n                            str += \"{...}\";\n                        }\n                    }\n                    str += \"</\" + describeElementType(type) + \">\";\n                } else {\n                    // Print Array\n                    str = \"[\";\n                    var _array = objectOrArray;\n                    for(var _i = 0; _i < _array.length; _i++){\n                        if (_i > 0) {\n                            str += \", \";\n                        }\n                        var _value = _array[_i];\n                        var _substr = void 0;\n                        if (typeof _value === \"object\" && _value !== null) {\n                            _substr = describeObjectForErrorMessage(_value);\n                        } else {\n                            _substr = describeValueForErrorMessage(_value);\n                        }\n                        if (\"\" + _i === expandedName) {\n                            start = str.length;\n                            length = _substr.length;\n                            str += _substr;\n                        } else if (_substr.length < 10 && str.length + _substr.length < 40) {\n                            str += _substr;\n                        } else {\n                            str += \"...\";\n                        }\n                    }\n                    str += \"]\";\n                }\n            } else {\n                if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {\n                    str = \"<\" + describeElementType(objectOrArray.type) + \"/>\";\n                } else if (jsxPropsParents.has(objectOrArray)) {\n                    // Print JSX\n                    var _type = jsxPropsParents.get(objectOrArray);\n                    str = \"<\" + (describeElementType(_type) || \"...\");\n                    var object = objectOrArray;\n                    var names = Object.keys(object);\n                    for(var _i2 = 0; _i2 < names.length; _i2++){\n                        str += \" \";\n                        var name = names[_i2];\n                        str += describeKeyForErrorMessage(name) + \"=\";\n                        var _value2 = object[name];\n                        var _substr2 = void 0;\n                        if (name === expandedName && typeof _value2 === \"object\" && _value2 !== null) {\n                            _substr2 = describeObjectForErrorMessage(_value2);\n                        } else {\n                            _substr2 = describeValueForErrorMessage(_value2);\n                        }\n                        if (typeof _value2 !== \"string\") {\n                            _substr2 = \"{\" + _substr2 + \"}\";\n                        }\n                        if (name === expandedName) {\n                            start = str.length;\n                            length = _substr2.length;\n                            str += _substr2;\n                        } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {\n                            str += _substr2;\n                        } else {\n                            str += \"...\";\n                        }\n                    }\n                    str += \">\";\n                } else {\n                    // Print Object\n                    str = \"{\";\n                    var _object = objectOrArray;\n                    var _names = Object.keys(_object);\n                    for(var _i3 = 0; _i3 < _names.length; _i3++){\n                        if (_i3 > 0) {\n                            str += \", \";\n                        }\n                        var _name = _names[_i3];\n                        str += describeKeyForErrorMessage(_name) + \": \";\n                        var _value3 = _object[_name];\n                        var _substr3 = void 0;\n                        if (typeof _value3 === \"object\" && _value3 !== null) {\n                            _substr3 = describeObjectForErrorMessage(_value3);\n                        } else {\n                            _substr3 = describeValueForErrorMessage(_value3);\n                        }\n                        if (_name === expandedName) {\n                            start = str.length;\n                            length = _substr3.length;\n                            str += _substr3;\n                        } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {\n                            str += _substr3;\n                        } else {\n                            str += \"...\";\n                        }\n                    }\n                    str += \"}\";\n                }\n            }\n            if (expandedName === undefined) {\n                return str;\n            }\n            if (start > -1 && length > 0) {\n                var highlight = \" \".repeat(start) + \"^\".repeat(length);\n                return \"\\n  \" + str + \"\\n  \" + highlight;\n            }\n            return \"\\n  \" + str;\n        }\n        var ObjectPrototype = Object.prototype;\n        var knownServerReferences = new WeakMap(); // Serializable values\n        // Thenable<ReactServerValue>\n        // function serializeByValueID(id: number): string {\n        //   return '$' + id.toString(16);\n        // }\n        function serializePromiseID(id) {\n            return \"$@\" + id.toString(16);\n        }\n        function serializeServerReferenceID(id) {\n            return \"$F\" + id.toString(16);\n        }\n        function serializeSymbolReference(name) {\n            return \"$S\" + name;\n        }\n        function serializeFormDataReference(id) {\n            // Why K? F is \"Function\". D is \"Date\". What else?\n            return \"$K\" + id.toString(16);\n        }\n        function serializeNumber(number) {\n            if (Number.isFinite(number)) {\n                if (number === 0 && 1 / number === -Infinity) {\n                    return \"$-0\";\n                } else {\n                    return number;\n                }\n            } else {\n                if (number === Infinity) {\n                    return \"$Infinity\";\n                } else if (number === -Infinity) {\n                    return \"$-Infinity\";\n                } else {\n                    return \"$NaN\";\n                }\n            }\n        }\n        function serializeUndefined() {\n            return \"$undefined\";\n        }\n        function serializeDateFromDateJSON(dateJSON) {\n            // JSON.stringify automatically calls Date.prototype.toJSON which calls toISOString.\n            // We need only tack on a $D prefix.\n            return \"$D\" + dateJSON;\n        }\n        function serializeBigInt(n) {\n            return \"$n\" + n.toString(10);\n        }\n        function serializeMapID(id) {\n            return \"$Q\" + id.toString(16);\n        }\n        function serializeSetID(id) {\n            return \"$W\" + id.toString(16);\n        }\n        function escapeStringValue(value) {\n            if (value[0] === \"$\") {\n                // We need to escape $ prefixed strings since we use those to encode\n                // references to IDs and as special symbol values.\n                return \"$\" + value;\n            } else {\n                return value;\n            }\n        }\n        function processReply(root, formFieldPrefix, resolve, reject) {\n            var nextPartId = 1;\n            var pendingParts = 0;\n            var formData = null;\n            function resolveToJSON(key, value) {\n                var parent = this; // Make sure that `parent[key]` wasn't JSONified before `value` was passed to us\n                {\n                    // $FlowFixMe[incompatible-use]\n                    var originalValue = parent[key];\n                    if (typeof originalValue === \"object\" && originalValue !== value && !(originalValue instanceof Date)) {\n                        if (objectName(originalValue) !== \"Object\") {\n                            error(\"Only plain objects can be passed to Server Functions from the Client. \" + \"%s objects are not supported.%s\", objectName(originalValue), describeObjectForErrorMessage(parent, key));\n                        } else {\n                            error(\"Only plain objects can be passed to Server Functions from the Client. \" + \"Objects with toJSON methods are not supported. Convert it manually \" + \"to a simple value before passing it to props.%s\", describeObjectForErrorMessage(parent, key));\n                        }\n                    }\n                }\n                if (value === null) {\n                    return null;\n                }\n                if (typeof value === \"object\") {\n                    // $FlowFixMe[method-unbinding]\n                    if (typeof value.then === \"function\") {\n                        // We assume that any object with a .then property is a \"Thenable\" type,\n                        // or a Promise type. Either of which can be represented by a Promise.\n                        if (formData === null) {\n                            // Upgrade to use FormData to allow us to stream this value.\n                            formData = new FormData();\n                        }\n                        pendingParts++;\n                        var promiseId = nextPartId++;\n                        var thenable = value;\n                        thenable.then(function(partValue) {\n                            var partJSON = JSON.stringify(partValue, resolveToJSON); // $FlowFixMe[incompatible-type] We know it's not null because we assigned it above.\n                            var data = formData; // eslint-disable-next-line react-internal/safe-string-coercion\n                            data.append(formFieldPrefix + promiseId, partJSON);\n                            pendingParts--;\n                            if (pendingParts === 0) {\n                                resolve(data);\n                            }\n                        }, function(reason) {\n                            // In the future we could consider serializing this as an error\n                            // that throws on the server instead.\n                            reject(reason);\n                        });\n                        return serializePromiseID(promiseId);\n                    }\n                    if (isArray(value)) {\n                        // $FlowFixMe[incompatible-return]\n                        return value;\n                    } // TODO: Should we the Object.prototype.toString.call() to test for cross-realm objects?\n                    if (value instanceof FormData) {\n                        if (formData === null) {\n                            // Upgrade to use FormData to allow us to use rich objects as its values.\n                            formData = new FormData();\n                        }\n                        var data = formData;\n                        var refId = nextPartId++; // Copy all the form fields with a prefix for this reference.\n                        // These must come first in the form order because we assume that all the\n                        // fields are available before this is referenced.\n                        var prefix = formFieldPrefix + refId + \"_\"; // $FlowFixMe[prop-missing]: FormData has forEach.\n                        value.forEach(function(originalValue, originalKey) {\n                            data.append(prefix + originalKey, originalValue);\n                        });\n                        return serializeFormDataReference(refId);\n                    }\n                    if (value instanceof Map) {\n                        var partJSON = JSON.stringify(Array.from(value), resolveToJSON);\n                        if (formData === null) {\n                            formData = new FormData();\n                        }\n                        var mapId = nextPartId++;\n                        formData.append(formFieldPrefix + mapId, partJSON);\n                        return serializeMapID(mapId);\n                    }\n                    if (value instanceof Set) {\n                        var _partJSON = JSON.stringify(Array.from(value), resolveToJSON);\n                        if (formData === null) {\n                            formData = new FormData();\n                        }\n                        var setId = nextPartId++;\n                        formData.append(formFieldPrefix + setId, _partJSON);\n                        return serializeSetID(setId);\n                    }\n                    var iteratorFn = getIteratorFn(value);\n                    if (iteratorFn) {\n                        return Array.from(value);\n                    } // Verify that this is a simple plain object.\n                    var proto = getPrototypeOf(value);\n                    if (proto !== ObjectPrototype && (proto === null || getPrototypeOf(proto) !== null)) {\n                        throw new Error(\"Only plain objects, and a few built-ins, can be passed to Server Actions. \" + \"Classes or null prototypes are not supported.\");\n                    }\n                    {\n                        if (value.$$typeof === REACT_ELEMENT_TYPE) {\n                            error(\"React Element cannot be passed to Server Functions from the Client.%s\", describeObjectForErrorMessage(parent, key));\n                        } else if (value.$$typeof === REACT_LAZY_TYPE) {\n                            error(\"React Lazy cannot be passed to Server Functions from the Client.%s\", describeObjectForErrorMessage(parent, key));\n                        } else if (value.$$typeof === REACT_PROVIDER_TYPE) {\n                            error(\"React Context Providers cannot be passed to Server Functions from the Client.%s\", describeObjectForErrorMessage(parent, key));\n                        } else if (objectName(value) !== \"Object\") {\n                            error(\"Only plain objects can be passed to Server Functions from the Client. \" + \"%s objects are not supported.%s\", objectName(value), describeObjectForErrorMessage(parent, key));\n                        } else if (!isSimpleObject(value)) {\n                            error(\"Only plain objects can be passed to Server Functions from the Client. \" + \"Classes or other objects with methods are not supported.%s\", describeObjectForErrorMessage(parent, key));\n                        } else if (Object.getOwnPropertySymbols) {\n                            var symbols = Object.getOwnPropertySymbols(value);\n                            if (symbols.length > 0) {\n                                error(\"Only plain objects can be passed to Server Functions from the Client. \" + \"Objects with symbol properties like %s are not supported.%s\", symbols[0].description, describeObjectForErrorMessage(parent, key));\n                            }\n                        }\n                    }\n                    return value;\n                }\n                if (typeof value === \"string\") {\n                    // TODO: Maybe too clever. If we support URL there's no similar trick.\n                    if (value[value.length - 1] === \"Z\") {\n                        // Possibly a Date, whose toJSON automatically calls toISOString\n                        // $FlowFixMe[incompatible-use]\n                        var _originalValue = parent[key];\n                        if (_originalValue instanceof Date) {\n                            return serializeDateFromDateJSON(value);\n                        }\n                    }\n                    return escapeStringValue(value);\n                }\n                if (typeof value === \"boolean\") {\n                    return value;\n                }\n                if (typeof value === \"number\") {\n                    return serializeNumber(value);\n                }\n                if (typeof value === \"undefined\") {\n                    return serializeUndefined();\n                }\n                if (typeof value === \"function\") {\n                    var metaData = knownServerReferences.get(value);\n                    if (metaData !== undefined) {\n                        var metaDataJSON = JSON.stringify(metaData, resolveToJSON);\n                        if (formData === null) {\n                            // Upgrade to use FormData to allow us to stream this value.\n                            formData = new FormData();\n                        } // The reference to this function came from the same client so we can pass it back.\n                        var _refId = nextPartId++; // eslint-disable-next-line react-internal/safe-string-coercion\n                        formData.set(formFieldPrefix + _refId, metaDataJSON);\n                        return serializeServerReferenceID(_refId);\n                    }\n                    throw new Error(\"Client Functions cannot be passed directly to Server Functions. \" + \"Only Functions passed from the Server can be passed back again.\");\n                }\n                if (typeof value === \"symbol\") {\n                    // $FlowFixMe[incompatible-type] `description` might be undefined\n                    var name = value.description;\n                    if (Symbol.for(name) !== value) {\n                        throw new Error(\"Only global symbols received from Symbol.for(...) can be passed to Server Functions. \" + (\"The symbol Symbol.for(\" + // $FlowFixMe[incompatible-type] `description` might be undefined\n                        value.description + \") cannot be found among global symbols.\"));\n                    }\n                    return serializeSymbolReference(name);\n                }\n                if (typeof value === \"bigint\") {\n                    return serializeBigInt(value);\n                }\n                throw new Error(\"Type \" + typeof value + \" is not supported as an argument to a Server Function.\");\n            } // $FlowFixMe[incompatible-type] it's not going to be undefined because we'll encode it.\n            var json = JSON.stringify(root, resolveToJSON);\n            if (formData === null) {\n                // If it's a simple data structure, we just use plain JSON.\n                resolve(json);\n            } else {\n                // Otherwise, we use FormData to let us stream in the result.\n                formData.set(formFieldPrefix + \"0\", json);\n                if (pendingParts === 0) {\n                    // $FlowFixMe[incompatible-call] this has already been refined.\n                    resolve(formData);\n                }\n            }\n        }\n        function registerServerReference(proxy, reference) {\n            knownServerReferences.set(proxy, reference);\n        } // $FlowFixMe[method-unbinding]\n        function createServerReference(id, callServer) {\n            var proxy = function() {\n                // $FlowFixMe[method-unbinding]\n                var args = Array.prototype.slice.call(arguments);\n                return callServer(id, args);\n            };\n            registerServerReference(proxy, {\n                id: id,\n                bound: null\n            });\n            return proxy;\n        }\n        var ContextRegistry = ReactSharedInternals.ContextRegistry;\n        function getOrCreateServerContext(globalName) {\n            if (!ContextRegistry[globalName]) {\n                var context = {\n                    $$typeof: REACT_SERVER_CONTEXT_TYPE,\n                    // As a workaround to support multiple concurrent renderers, we categorize\n                    // some renderers as primary and others as secondary. We only expect\n                    // there to be two concurrent renderers at most: React Native (primary) and\n                    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n                    // Secondary renderers store their context values on separate fields.\n                    _currentValue: REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED,\n                    _currentValue2: REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED,\n                    _defaultValue: REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED,\n                    // Used to track how many concurrent renderers this context currently\n                    // supports within in a single renderer. Such as parallel server rendering.\n                    _threadCount: 0,\n                    // These are circular\n                    Provider: null,\n                    Consumer: null,\n                    _globalName: globalName\n                };\n                context.Provider = {\n                    $$typeof: REACT_PROVIDER_TYPE,\n                    _context: context\n                };\n                {\n                    var hasWarnedAboutUsingConsumer;\n                    context._currentRenderer = null;\n                    context._currentRenderer2 = null;\n                    Object.defineProperties(context, {\n                        Consumer: {\n                            get: function() {\n                                if (!hasWarnedAboutUsingConsumer) {\n                                    error(\"Consumer pattern is not supported by ReactServerContext\");\n                                    hasWarnedAboutUsingConsumer = true;\n                                }\n                                return null;\n                            }\n                        }\n                    });\n                }\n                ContextRegistry[globalName] = context;\n            }\n            return ContextRegistry[globalName];\n        }\n        var ROW_ID = 0;\n        var ROW_TAG = 1;\n        var ROW_LENGTH = 2;\n        var ROW_CHUNK_BY_NEWLINE = 3;\n        var ROW_CHUNK_BY_LENGTH = 4;\n        var PENDING = \"pending\";\n        var BLOCKED = \"blocked\";\n        var CYCLIC = \"cyclic\";\n        var RESOLVED_MODEL = \"resolved_model\";\n        var RESOLVED_MODULE = \"resolved_module\";\n        var INITIALIZED = \"fulfilled\";\n        var ERRORED = \"rejected\"; // $FlowFixMe[missing-this-annot]\n        function Chunk(status, value, reason, response) {\n            this.status = status;\n            this.value = value;\n            this.reason = reason;\n            this._response = response;\n        } // We subclass Promise.prototype so that we get other methods like .catch\n        Chunk.prototype = Object.create(Promise.prototype); // TODO: This doesn't return a new Promise chain unlike the real .then\n        Chunk.prototype.then = function(resolve, reject) {\n            var chunk = this; // If we have resolved content, we try to initialize it first which\n            // might put us back into one of the other states.\n            switch(chunk.status){\n                case RESOLVED_MODEL:\n                    initializeModelChunk(chunk);\n                    break;\n                case RESOLVED_MODULE:\n                    initializeModuleChunk(chunk);\n                    break;\n            } // The status might have changed after initialization.\n            switch(chunk.status){\n                case INITIALIZED:\n                    resolve(chunk.value);\n                    break;\n                case PENDING:\n                case BLOCKED:\n                case CYCLIC:\n                    if (resolve) {\n                        if (chunk.value === null) {\n                            chunk.value = [];\n                        }\n                        chunk.value.push(resolve);\n                    }\n                    if (reject) {\n                        if (chunk.reason === null) {\n                            chunk.reason = [];\n                        }\n                        chunk.reason.push(reject);\n                    }\n                    break;\n                default:\n                    reject(chunk.reason);\n                    break;\n            }\n        };\n        function readChunk(chunk) {\n            // If we have resolved content, we try to initialize it first which\n            // might put us back into one of the other states.\n            switch(chunk.status){\n                case RESOLVED_MODEL:\n                    initializeModelChunk(chunk);\n                    break;\n                case RESOLVED_MODULE:\n                    initializeModuleChunk(chunk);\n                    break;\n            } // The status might have changed after initialization.\n            switch(chunk.status){\n                case INITIALIZED:\n                    return chunk.value;\n                case PENDING:\n                case BLOCKED:\n                case CYCLIC:\n                    // eslint-disable-next-line no-throw-literal\n                    throw chunk;\n                default:\n                    throw chunk.reason;\n            }\n        }\n        function getRoot(response) {\n            var chunk = getChunk(response, 0);\n            return chunk;\n        }\n        function createPendingChunk(response) {\n            // $FlowFixMe[invalid-constructor] Flow doesn't support functions as constructors\n            return new Chunk(PENDING, null, null, response);\n        }\n        function createBlockedChunk(response) {\n            // $FlowFixMe[invalid-constructor] Flow doesn't support functions as constructors\n            return new Chunk(BLOCKED, null, null, response);\n        }\n        function createErrorChunk(response, error) {\n            // $FlowFixMe[invalid-constructor] Flow doesn't support functions as constructors\n            return new Chunk(ERRORED, null, error, response);\n        }\n        function wakeChunk(listeners, value) {\n            for(var i = 0; i < listeners.length; i++){\n                var listener = listeners[i];\n                listener(value);\n            }\n        }\n        function wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners) {\n            switch(chunk.status){\n                case INITIALIZED:\n                    wakeChunk(resolveListeners, chunk.value);\n                    break;\n                case PENDING:\n                case BLOCKED:\n                case CYCLIC:\n                    chunk.value = resolveListeners;\n                    chunk.reason = rejectListeners;\n                    break;\n                case ERRORED:\n                    if (rejectListeners) {\n                        wakeChunk(rejectListeners, chunk.reason);\n                    }\n                    break;\n            }\n        }\n        function triggerErrorOnChunk(chunk, error) {\n            if (chunk.status !== PENDING && chunk.status !== BLOCKED) {\n                // We already resolved. We didn't expect to see this.\n                return;\n            }\n            var listeners = chunk.reason;\n            var erroredChunk = chunk;\n            erroredChunk.status = ERRORED;\n            erroredChunk.reason = error;\n            if (listeners !== null) {\n                wakeChunk(listeners, error);\n            }\n        }\n        function createResolvedModelChunk(response, value) {\n            // $FlowFixMe[invalid-constructor] Flow doesn't support functions as constructors\n            return new Chunk(RESOLVED_MODEL, value, null, response);\n        }\n        function createResolvedModuleChunk(response, value) {\n            // $FlowFixMe[invalid-constructor] Flow doesn't support functions as constructors\n            return new Chunk(RESOLVED_MODULE, value, null, response);\n        }\n        function createInitializedTextChunk(response, value) {\n            // $FlowFixMe[invalid-constructor] Flow doesn't support functions as constructors\n            return new Chunk(INITIALIZED, value, null, response);\n        }\n        function resolveModelChunk(chunk, value) {\n            if (chunk.status !== PENDING) {\n                // We already resolved. We didn't expect to see this.\n                return;\n            }\n            var resolveListeners = chunk.value;\n            var rejectListeners = chunk.reason;\n            var resolvedChunk = chunk;\n            resolvedChunk.status = RESOLVED_MODEL;\n            resolvedChunk.value = value;\n            if (resolveListeners !== null) {\n                // This is unfortunate that we're reading this eagerly if\n                // we already have listeners attached since they might no\n                // longer be rendered or might not be the highest pri.\n                initializeModelChunk(resolvedChunk); // The status might have changed after initialization.\n                wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners);\n            }\n        }\n        function resolveModuleChunk(chunk, value) {\n            if (chunk.status !== PENDING && chunk.status !== BLOCKED) {\n                // We already resolved. We didn't expect to see this.\n                return;\n            }\n            var resolveListeners = chunk.value;\n            var rejectListeners = chunk.reason;\n            var resolvedChunk = chunk;\n            resolvedChunk.status = RESOLVED_MODULE;\n            resolvedChunk.value = value;\n            if (resolveListeners !== null) {\n                initializeModuleChunk(resolvedChunk);\n                wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners);\n            }\n        }\n        var initializingChunk = null;\n        var initializingChunkBlockedModel = null;\n        function initializeModelChunk(chunk) {\n            var prevChunk = initializingChunk;\n            var prevBlocked = initializingChunkBlockedModel;\n            initializingChunk = chunk;\n            initializingChunkBlockedModel = null;\n            var resolvedModel = chunk.value; // We go to the CYCLIC state until we've fully resolved this.\n            // We do this before parsing in case we try to initialize the same chunk\n            // while parsing the model. Such as in a cyclic reference.\n            var cyclicChunk = chunk;\n            cyclicChunk.status = CYCLIC;\n            cyclicChunk.value = null;\n            cyclicChunk.reason = null;\n            try {\n                var value = parseModel(chunk._response, resolvedModel);\n                if (initializingChunkBlockedModel !== null && initializingChunkBlockedModel.deps > 0) {\n                    initializingChunkBlockedModel.value = value; // We discovered new dependencies on modules that are not yet resolved.\n                    // We have to go the BLOCKED state until they're resolved.\n                    var blockedChunk = chunk;\n                    blockedChunk.status = BLOCKED;\n                    blockedChunk.value = null;\n                    blockedChunk.reason = null;\n                } else {\n                    var resolveListeners = cyclicChunk.value;\n                    var initializedChunk = chunk;\n                    initializedChunk.status = INITIALIZED;\n                    initializedChunk.value = value;\n                    if (resolveListeners !== null) {\n                        wakeChunk(resolveListeners, value);\n                    }\n                }\n            } catch (error) {\n                var erroredChunk = chunk;\n                erroredChunk.status = ERRORED;\n                erroredChunk.reason = error;\n            } finally{\n                initializingChunk = prevChunk;\n                initializingChunkBlockedModel = prevBlocked;\n            }\n        }\n        function initializeModuleChunk(chunk) {\n            try {\n                var value = requireModule(chunk.value);\n                var initializedChunk = chunk;\n                initializedChunk.status = INITIALIZED;\n                initializedChunk.value = value;\n            } catch (error) {\n                var erroredChunk = chunk;\n                erroredChunk.status = ERRORED;\n                erroredChunk.reason = error;\n            }\n        } // Report that any missing chunks in the model is now going to throw this\n        // error upon read. Also notify any pending promises.\n        function reportGlobalError(response, error) {\n            response._chunks.forEach(function(chunk) {\n                // If this chunk was already resolved or errored, it won't\n                // trigger an error but if it wasn't then we need to\n                // because we won't be getting any new data to resolve it.\n                if (chunk.status === PENDING) {\n                    triggerErrorOnChunk(chunk, error);\n                }\n            });\n        }\n        function createElement(type, key, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: null,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: null\n            };\n            {\n                // We don't really need to add any of these but keeping them for good measure.\n                // Unfortunately, _store is enumerable in jest matchers so for equality to\n                // work, I need to keep it or make _store non-enumerable in the other file.\n                element._store = {};\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: true // This element has already been validated on the server.\n                });\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: null\n                });\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: null\n                });\n            }\n            return element;\n        }\n        function createLazyChunkWrapper(chunk) {\n            var lazyType = {\n                $$typeof: REACT_LAZY_TYPE,\n                _payload: chunk,\n                _init: readChunk\n            };\n            return lazyType;\n        }\n        function getChunk(response, id) {\n            var chunks = response._chunks;\n            var chunk = chunks.get(id);\n            if (!chunk) {\n                chunk = createPendingChunk(response);\n                chunks.set(id, chunk);\n            }\n            return chunk;\n        }\n        function createModelResolver(chunk, parentObject, key, cyclic) {\n            var blocked;\n            if (initializingChunkBlockedModel) {\n                blocked = initializingChunkBlockedModel;\n                if (!cyclic) {\n                    blocked.deps++;\n                }\n            } else {\n                blocked = initializingChunkBlockedModel = {\n                    deps: cyclic ? 0 : 1,\n                    value: null\n                };\n            }\n            return function(value) {\n                parentObject[key] = value;\n                blocked.deps--;\n                if (blocked.deps === 0) {\n                    if (chunk.status !== BLOCKED) {\n                        return;\n                    }\n                    var resolveListeners = chunk.value;\n                    var initializedChunk = chunk;\n                    initializedChunk.status = INITIALIZED;\n                    initializedChunk.value = blocked.value;\n                    if (resolveListeners !== null) {\n                        wakeChunk(resolveListeners, blocked.value);\n                    }\n                }\n            };\n        }\n        function createModelReject(chunk) {\n            return function(error) {\n                return triggerErrorOnChunk(chunk, error);\n            };\n        }\n        function createServerReferenceProxy(response, metaData) {\n            var callServer = response._callServer;\n            var proxy = function() {\n                // $FlowFixMe[method-unbinding]\n                var args = Array.prototype.slice.call(arguments);\n                var p = metaData.bound;\n                if (!p) {\n                    return callServer(metaData.id, args);\n                }\n                if (p.status === INITIALIZED) {\n                    var bound = p.value;\n                    return callServer(metaData.id, bound.concat(args));\n                } // Since this is a fake Promise whose .then doesn't chain, we have to wrap it.\n                // TODO: Remove the wrapper once that's fixed.\n                return Promise.resolve(p).then(function(bound) {\n                    return callServer(metaData.id, bound.concat(args));\n                });\n            };\n            registerServerReference(proxy, metaData);\n            return proxy;\n        }\n        function getOutlinedModel(response, id) {\n            var chunk = getChunk(response, id);\n            switch(chunk.status){\n                case RESOLVED_MODEL:\n                    initializeModelChunk(chunk);\n                    break;\n            } // The status might have changed after initialization.\n            switch(chunk.status){\n                case INITIALIZED:\n                    {\n                        return chunk.value;\n                    }\n                // We always encode it first in the stream so it won't be pending.\n                default:\n                    throw chunk.reason;\n            }\n        }\n        function parseModelString(response, parentObject, key, value) {\n            if (value[0] === \"$\") {\n                if (value === \"$\") {\n                    // A very common symbol.\n                    return REACT_ELEMENT_TYPE;\n                }\n                switch(value[1]){\n                    case \"$\":\n                        {\n                            // This was an escaped string value.\n                            return value.slice(1);\n                        }\n                    case \"L\":\n                        {\n                            // Lazy node\n                            var id = parseInt(value.slice(2), 16);\n                            var chunk = getChunk(response, id); // We create a React.lazy wrapper around any lazy values.\n                            // When passed into React, we'll know how to suspend on this.\n                            return createLazyChunkWrapper(chunk);\n                        }\n                    case \"@\":\n                        {\n                            // Promise\n                            var _id = parseInt(value.slice(2), 16);\n                            var _chunk = getChunk(response, _id);\n                            return _chunk;\n                        }\n                    case \"S\":\n                        {\n                            // Symbol\n                            return Symbol.for(value.slice(2));\n                        }\n                    case \"P\":\n                        {\n                            // Server Context Provider\n                            return getOrCreateServerContext(value.slice(2)).Provider;\n                        }\n                    case \"F\":\n                        {\n                            // Server Reference\n                            var _id2 = parseInt(value.slice(2), 16);\n                            var metadata = getOutlinedModel(response, _id2);\n                            return createServerReferenceProxy(response, metadata);\n                        }\n                    case \"Q\":\n                        {\n                            // Map\n                            var _id3 = parseInt(value.slice(2), 16);\n                            var data = getOutlinedModel(response, _id3);\n                            return new Map(data);\n                        }\n                    case \"W\":\n                        {\n                            // Set\n                            var _id4 = parseInt(value.slice(2), 16);\n                            var _data = getOutlinedModel(response, _id4);\n                            return new Set(_data);\n                        }\n                    case \"I\":\n                        {\n                            // $Infinity\n                            return Infinity;\n                        }\n                    case \"-\":\n                        {\n                            // $-0 or $-Infinity\n                            if (value === \"$-0\") {\n                                return -0;\n                            } else {\n                                return -Infinity;\n                            }\n                        }\n                    case \"N\":\n                        {\n                            // $NaN\n                            return NaN;\n                        }\n                    case \"u\":\n                        {\n                            // matches \"$undefined\"\n                            // Special encoding for `undefined` which can't be serialized as JSON otherwise.\n                            return undefined;\n                        }\n                    case \"D\":\n                        {\n                            // Date\n                            return new Date(Date.parse(value.slice(2)));\n                        }\n                    case \"n\":\n                        {\n                            // BigInt\n                            return BigInt(value.slice(2));\n                        }\n                    default:\n                        {\n                            // We assume that anything else is a reference ID.\n                            var _id5 = parseInt(value.slice(1), 16);\n                            var _chunk2 = getChunk(response, _id5);\n                            switch(_chunk2.status){\n                                case RESOLVED_MODEL:\n                                    initializeModelChunk(_chunk2);\n                                    break;\n                                case RESOLVED_MODULE:\n                                    initializeModuleChunk(_chunk2);\n                                    break;\n                            } // The status might have changed after initialization.\n                            switch(_chunk2.status){\n                                case INITIALIZED:\n                                    return _chunk2.value;\n                                case PENDING:\n                                case BLOCKED:\n                                case CYCLIC:\n                                    var parentChunk = initializingChunk;\n                                    _chunk2.then(createModelResolver(parentChunk, parentObject, key, _chunk2.status === CYCLIC), createModelReject(parentChunk));\n                                    return null;\n                                default:\n                                    throw _chunk2.reason;\n                            }\n                        }\n                }\n            }\n            return value;\n        }\n        function parseModelTuple(response, value) {\n            var tuple = value;\n            if (tuple[0] === REACT_ELEMENT_TYPE) {\n                // TODO: Consider having React just directly accept these arrays as elements.\n                // Or even change the ReactElement type to be an array.\n                return createElement(tuple[1], tuple[2], tuple[3]);\n            }\n            return value;\n        }\n        function missingCall() {\n            throw new Error('Trying to call a function from \"use server\" but the callServer option ' + \"was not implemented in your router runtime.\");\n        }\n        function createResponse(bundlerConfig, moduleLoading, callServer, nonce) {\n            var chunks = new Map();\n            var response = {\n                _bundlerConfig: bundlerConfig,\n                _moduleLoading: moduleLoading,\n                _callServer: callServer !== undefined ? callServer : missingCall,\n                _nonce: nonce,\n                _chunks: chunks,\n                _stringDecoder: createStringDecoder(),\n                _fromJSON: null,\n                _rowState: 0,\n                _rowID: 0,\n                _rowTag: 0,\n                _rowLength: 0,\n                _buffer: []\n            }; // Don't inline this call because it causes closure to outline the call above.\n            response._fromJSON = createFromJSONCallback(response);\n            return response;\n        }\n        function resolveModel(response, id, model) {\n            var chunks = response._chunks;\n            var chunk = chunks.get(id);\n            if (!chunk) {\n                chunks.set(id, createResolvedModelChunk(response, model));\n            } else {\n                resolveModelChunk(chunk, model);\n            }\n        }\n        function resolveText(response, id, text) {\n            var chunks = response._chunks; // We assume that we always reference large strings after they've been\n            // emitted.\n            chunks.set(id, createInitializedTextChunk(response, text));\n        }\n        function resolveModule(response, id, model) {\n            var chunks = response._chunks;\n            var chunk = chunks.get(id);\n            var clientReferenceMetadata = parseModel(response, model);\n            var clientReference = resolveClientReference(response._bundlerConfig, clientReferenceMetadata);\n            // For now we preload all modules as early as possible since it's likely\n            // that we'll need them.\n            var promise = preloadModule(clientReference);\n            if (promise) {\n                var blockedChunk;\n                if (!chunk) {\n                    // Technically, we should just treat promise as the chunk in this\n                    // case. Because it'll just behave as any other promise.\n                    blockedChunk = createBlockedChunk(response);\n                    chunks.set(id, blockedChunk);\n                } else {\n                    // This can't actually happen because we don't have any forward\n                    // references to modules.\n                    blockedChunk = chunk;\n                    blockedChunk.status = BLOCKED;\n                }\n                promise.then(function() {\n                    return resolveModuleChunk(blockedChunk, clientReference);\n                }, function(error) {\n                    return triggerErrorOnChunk(blockedChunk, error);\n                });\n            } else {\n                if (!chunk) {\n                    chunks.set(id, createResolvedModuleChunk(response, clientReference));\n                } else {\n                    // This can't actually happen because we don't have any forward\n                    // references to modules.\n                    resolveModuleChunk(chunk, clientReference);\n                }\n            }\n        }\n        function resolveErrorDev(response, id, digest, message, stack) {\n            var error = new Error(message || \"An error occurred in the Server Components render but no message was provided\");\n            error.stack = stack;\n            error.digest = digest;\n            var errorWithDigest = error;\n            var chunks = response._chunks;\n            var chunk = chunks.get(id);\n            if (!chunk) {\n                chunks.set(id, createErrorChunk(response, errorWithDigest));\n            } else {\n                triggerErrorOnChunk(chunk, errorWithDigest);\n            }\n        }\n        function resolveHint(response, code, model) {\n            var hintModel = parseModel(response, model);\n            dispatchHint(code, hintModel);\n        }\n        function processFullRow(response, id, tag, buffer, chunk) {\n            var stringDecoder = response._stringDecoder;\n            var row = \"\";\n            for(var i = 0; i < buffer.length; i++){\n                row += readPartialStringChunk(stringDecoder, buffer[i]);\n            }\n            row += readFinalStringChunk(stringDecoder, chunk);\n            switch(tag){\n                case 73:\n                    {\n                        resolveModule(response, id, row);\n                        return;\n                    }\n                case 72:\n                    {\n                        var code = row[0];\n                        resolveHint(response, code, row.slice(1));\n                        return;\n                    }\n                case 69:\n                    {\n                        var errorInfo = JSON.parse(row);\n                        {\n                            resolveErrorDev(response, id, errorInfo.digest, errorInfo.message, errorInfo.stack);\n                        }\n                        return;\n                    }\n                case 84:\n                    {\n                        resolveText(response, id, row);\n                        return;\n                    }\n                case 80:\n                // Fallthrough\n                default:\n                    /* \"\"\" \"{\" \"[\" \"t\" \"f\" \"n\" \"0\" - \"9\" */ {\n                        // We assume anything else is JSON.\n                        resolveModel(response, id, row);\n                        return;\n                    }\n            }\n        }\n        function processBinaryChunk(response, chunk) {\n            var i = 0;\n            var rowState = response._rowState;\n            var rowID = response._rowID;\n            var rowTag = response._rowTag;\n            var rowLength = response._rowLength;\n            var buffer = response._buffer;\n            var chunkLength = chunk.length;\n            while(i < chunkLength){\n                var lastIdx = -1;\n                switch(rowState){\n                    case ROW_ID:\n                        {\n                            var byte = chunk[i++];\n                            if (byte === 58) {\n                                // Finished the rowID, next we'll parse the tag.\n                                rowState = ROW_TAG;\n                            } else {\n                                rowID = rowID << 4 | (byte > 96 ? byte - 87 : byte - 48);\n                            }\n                            continue;\n                        }\n                    case ROW_TAG:\n                        {\n                            var resolvedRowTag = chunk[i];\n                            if (resolvedRowTag === 84 || enableBinaryFlight) {\n                                rowTag = resolvedRowTag;\n                                rowState = ROW_LENGTH;\n                                i++;\n                            } else if (resolvedRowTag > 64 && resolvedRowTag < 91) {\n                                rowTag = resolvedRowTag;\n                                rowState = ROW_CHUNK_BY_NEWLINE;\n                                i++;\n                            } else {\n                                rowTag = 0;\n                                rowState = ROW_CHUNK_BY_NEWLINE; // This was an unknown tag so it was probably part of the data.\n                            }\n                            continue;\n                        }\n                    case ROW_LENGTH:\n                        {\n                            var _byte = chunk[i++];\n                            if (_byte === 44) {\n                                // Finished the rowLength, next we'll buffer up to that length.\n                                rowState = ROW_CHUNK_BY_LENGTH;\n                            } else {\n                                rowLength = rowLength << 4 | (_byte > 96 ? _byte - 87 : _byte - 48);\n                            }\n                            continue;\n                        }\n                    case ROW_CHUNK_BY_NEWLINE:\n                        {\n                            // We're looking for a newline\n                            lastIdx = chunk.indexOf(10, i);\n                            break;\n                        }\n                    case ROW_CHUNK_BY_LENGTH:\n                        {\n                            // We're looking for the remaining byte length\n                            lastIdx = i + rowLength;\n                            if (lastIdx > chunk.length) {\n                                lastIdx = -1;\n                            }\n                            break;\n                        }\n                }\n                var offset = chunk.byteOffset + i;\n                if (lastIdx > -1) {\n                    // We found the last chunk of the row\n                    var length = lastIdx - i;\n                    var lastChunk = new Uint8Array(chunk.buffer, offset, length);\n                    processFullRow(response, rowID, rowTag, buffer, lastChunk); // Reset state machine for a new row\n                    i = lastIdx;\n                    if (rowState === ROW_CHUNK_BY_NEWLINE) {\n                        // If we're trailing by a newline we need to skip it.\n                        i++;\n                    }\n                    rowState = ROW_ID;\n                    rowTag = 0;\n                    rowID = 0;\n                    rowLength = 0;\n                    buffer.length = 0;\n                } else {\n                    // The rest of this row is in a future chunk. We stash the rest of the\n                    // current chunk until we can process the full row.\n                    var _length = chunk.byteLength - i;\n                    var remainingSlice = new Uint8Array(chunk.buffer, offset, _length);\n                    buffer.push(remainingSlice); // Update how many bytes we're still waiting for. If we're looking for\n                    // a newline, this doesn't hurt since we'll just ignore it.\n                    rowLength -= remainingSlice.byteLength;\n                    break;\n                }\n            }\n            response._rowState = rowState;\n            response._rowID = rowID;\n            response._rowTag = rowTag;\n            response._rowLength = rowLength;\n        }\n        function parseModel(response, json) {\n            return JSON.parse(json, response._fromJSON);\n        }\n        function createFromJSONCallback(response) {\n            // $FlowFixMe[missing-this-annot]\n            return function(key, value) {\n                if (typeof value === \"string\") {\n                    // We can't use .bind here because we need the \"this\" value.\n                    return parseModelString(response, this, key, value);\n                }\n                if (typeof value === \"object\" && value !== null) {\n                    return parseModelTuple(response, value);\n                }\n                return value;\n            };\n        }\n        function close(response) {\n            // In case there are any remaining unresolved chunks, they won't\n            // be resolved now. So we need to issue an error to those.\n            // Ideally we should be able to early bail out if we kept a\n            // ref count of pending chunks.\n            reportGlobalError(response, new Error(\"Connection closed.\"));\n        }\n        function createResponseFromOptions(options) {\n            return createResponse(null, null, options && options.callServer ? options.callServer : undefined, undefined // nonce\n            );\n        }\n        function startReadingFromStream(response, stream) {\n            var reader = stream.getReader();\n            function progress(_ref) {\n                var done = _ref.done, value = _ref.value;\n                if (done) {\n                    close(response);\n                    return;\n                }\n                var buffer = value;\n                processBinaryChunk(response, buffer);\n                return reader.read().then(progress).catch(error);\n            }\n            function error(e) {\n                reportGlobalError(response, e);\n            }\n            reader.read().then(progress).catch(error);\n        }\n        function createFromReadableStream(stream, options) {\n            var response = createResponseFromOptions(options);\n            startReadingFromStream(response, stream);\n            return getRoot(response);\n        }\n        function createFromFetch(promiseForResponse, options) {\n            var response = createResponseFromOptions(options);\n            promiseForResponse.then(function(r) {\n                startReadingFromStream(response, r.body);\n            }, function(e) {\n                reportGlobalError(response, e);\n            });\n            return getRoot(response);\n        }\n        function encodeReply(value) /* We don't use URLSearchParams yet but maybe */ {\n            return new Promise(function(resolve, reject) {\n                processReply(value, \"\", resolve, reject);\n            });\n        }\n        exports.createFromFetch = createFromFetch;\n        exports.createFromReadableStream = createFromReadableStream;\n        exports.createServerReference = createServerReference;\n        exports.encodeReply = encodeReply;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/client.browser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-server-dom-webpack/client.browser.js ***!
  \************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-server-dom-webpack-client.browser.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3Qtc2VydmVyLWRvbS13ZWJwYWNrL2NsaWVudC5icm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLHFQQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LXNlcnZlci1kb20td2VicGFjay9jbGllbnQuYnJvd3Nlci5qcz9mZTkwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2stY2xpZW50LmJyb3dzZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3Qtc2VydmVyLWRvbS13ZWJwYWNrLWNsaWVudC5icm93c2VyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/client.browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/client.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-server-dom-webpack/client.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = __webpack_require__(/*! ./client.browser */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/client.browser.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3Qtc2VydmVyLWRvbS13ZWJwYWNrL2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxnS0FBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2svY2xpZW50LmpzPzIzNGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2xpZW50LmJyb3dzZXInKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/client.js\n"));

/***/ })

}]);