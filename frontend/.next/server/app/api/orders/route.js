"use strict";(()=>{var e={};e.id=9146,e.ids=[9146],e.modules={11185:e=>{e.exports=require("mongoose")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},14300:e=>{e.exports=require("buffer")},6113:e=>{e.exports=require("crypto")},12781:e=>{e.exports=require("stream")},73837:e=>{e.exports=require("util")},2048:(e,t,r)=>{r.r(t),r.d(t,{headerHooks:()=>m,originalPathname:()=>v,patchFetch:()=>R,requestAsyncStorage:()=>I,routeModule:()=>g,serverHooks:()=>y,staticGenerationAsyncStorage:()=>w,staticGenerationBailout:()=>h});var a={};r.r(a),r.d(a,{GET:()=>c,POST:()=>f});var n=r(95419),i=r(69108),s=r(99678),o=r(47033),p=r(44390),d=r(64310),l=r(70260),u=r(69059);async function c(e){try{let t;await (0,o.Z)();let r=await (0,u.mk)(e);if(r instanceof Response)return r;"client"===r.role?t=await p.Z.find({clientId:r._id}).populate("gigId","title","Gig").populate("clientId","name","User").populate("freelancerId","name","User").populate("review",null,"Review"):"freelancer"===r.role&&(t=await p.Z.find({freelancerId:r._id}).populate("gigId","title","Gig").populate("clientId","name","User").populate("freelancerId","name","User").populate("review",null,"Review"));let a=new Date;if(t)for(let e of t)"in_progress"===e.status&&e.dueDate&&new Date(e.dueDate)<a&&(e.isLate=!0,e.status="late",await e.save());let n=t?.map(e=>({...e.toObject(),id:e._id,gig:e.gigId,client:e.clientId,freelancer:e.freelancerId,gigId:e.gigId?._id,clientId:e.clientId?._id,freelancerId:e.freelancerId?._id}))||[];return new Response(JSON.stringify(n),{status:200,headers:{"Content-Type":"application/json"}})}catch(e){return console.error("Get orders error:",e),new Response(JSON.stringify({message:"Server error"}),{status:500,headers:{"Content-Type":"application/json"}})}}async function f(e){try{let t;await (0,o.Z)();let r=await (0,u.MH)(e,"client");if(r instanceof Response)return r;let{gigId:a,requirements:n}=await e.json();if(!a||!n)return new Response(JSON.stringify({message:"Please provide all required fields"}),{status:400,headers:{"Content-Type":"application/json"}});try{t=await d.Z.findById(a)}catch(e){if("CastError"===e.name&&"ObjectId"===e.kind)return new Response(JSON.stringify({message:"Invalid gig ID format. MongoDB requires a valid 24-character hex string.",error:"INVALID_ID_FORMAT"}),{status:400,headers:{"Content-Type":"application/json"}});throw e}if(!t)return new Response(JSON.stringify({message:"Gig not found"}),{status:404,headers:{"Content-Type":"application/json"}});let i=await l.Z.findById(r._id);if(!i||i.balance<t.price)return new Response(JSON.stringify({message:"Insufficient balance",required:t.price,current:i?.balance||0}),{status:400,headers:{"Content-Type":"application/json"}});let s=new Date;s.setDate(s.getDate()+t.durationDays);let c=await p.Z.create({gigId:a,clientId:r._id,freelancerId:t.freelancerId,status:"pending",price:t.price,requirements:n,dueDate:s});await l.Z.findByIdAndUpdate(r._id,{$inc:{balance:-t.price}});let f=await p.Z.findById(c._id).populate("gigId","title","Gig").populate("clientId","name","User").populate("freelancerId","name","User");return new Response(JSON.stringify(f),{status:201,headers:{"Content-Type":"application/json"}})}catch(e){return console.error("Create order error:",e),new Response(JSON.stringify({message:"Server error"}),{status:500,headers:{"Content-Type":"application/json"}})}}let g=new n.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/orders/route",pathname:"/api/orders",filename:"route",bundlePath:"app/api/orders/route"},resolvedPagePath:"E:\\rozgaar-mongodb\\frontend\\app\\api\\orders\\route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:I,staticGenerationAsyncStorage:w,serverHooks:y,headerHooks:m,staticGenerationBailout:h}=g,v="/api/orders/route";function R(){return(0,s.patchFetch)({serverHooks:y,staticGenerationAsyncStorage:w})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[632,110,7842,6245,9965,6592,6310,9074,781,8057,4991,423,8844,5007,6851,3079,5312,432,2385],()=>r(2048));module.exports=a})();